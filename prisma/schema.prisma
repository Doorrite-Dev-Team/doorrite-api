// ===============================
// Prisma MongoDB Schema
// ===============================

// --- Generators ---
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "../src"
}

// ===============================
// ENUMS
// ===============================
enum Role {
  CUSTOMER
  ADMIN
}

enum VehicleType {
  MOTORCYCLE
  BIKE
  CAR
  BICYCLE
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  PAYSTACK
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  WAITING_PICKUP
  PICKED_UP
  DELIVERING
  DELIVERED
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

// ===============================
// TYPES
// ===============================
type Address {
  address      String         // Human-readable formatted address
  state        String? @default("Ilorin")
  country      String? @default("Nigeria")
  coordinates  Coordinates?
}

type Coordinates {
  lat   Float
  long  Float
}

// ===============================
// MODELS
// ===============================
model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  role            Role     @default(CUSTOMER)
  fullName        String
  email           String   @unique
  phoneNumber     String   @unique
  passwordHash    String
  profileImageUrl String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  address         Address[]
  orders          Order[]   @relation("customer_orders")
  payments        Payment[]
  reviews         Review[]
}

model Vendor {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  email        String      @unique
  businessName String      @unique
  phoneNumber  String      @unique
  passwordHash String
  logoUrl      String?
  rating       Float?
  isActive     Boolean     @default(true)
  isVerified   Boolean     @default(false)
  isApproved   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  address   Address

  // Relations
  products  Product[]
  orders    Order[]
  reviews   Review[]
  wallet    Wallet?
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  description String?
  basePrice   Float
  sku         String?
  attributes  Json?    // e.g. {"weight":"500g","unit":"g"}
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  name        String
  price       Float
  stock       Int?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]
}

model Rider {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  email           String      @unique
  phoneNumber     String      @unique
  passwordHash    String
  vehicleType     VehicleType @default(BICYCLE)
  profileImageUrl String?
  licenseNumber   String?
  isAvailable     Boolean     @default(true)
  isVerified      Boolean     @default(false)
  isApproved      Boolean     @default(false)
  rating          Float?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt


  address    Address?
  deliveries Delivery[]
  orders     Order[]    @relation("rider_orders")
  reviews    Review[]
  wallet     Wallet?
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String        @db.ObjectId
  customer        User          @relation("customer_orders", fields: [customerId], references: [id])
  vendorId        String        @db.ObjectId
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  riderId         String?       @db.ObjectId
  rider           Rider?        @relation("rider_orders", fields: [riderId], references: [id])
  status          OrderStatus   @default(PENDING)
  deliveryAddress Address
  deliveryVerificationCode  String?
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  placedAt        DateTime      @default(now())
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  items    OrderItem[]
  payment  Payment?
  delivery Delivery?
  history  OrderHistory[]
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  variantId  String?  @db.ObjectId
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String        @unique @db.ObjectId
  order         Order         @relation(fields: [orderId], references: [id])
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  method        PaymentMethod
  transactionId String?
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Delivery {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId               String         @unique @db.ObjectId
  order                 Order          @relation(fields: [orderId], references: [id])
  riderId               String         @db.ObjectId
  rider                 Rider          @relation(fields: [riderId], references: [id])
  pickupLocation        Json
  dropoffLocation       Json
  status                DeliveryStatus @default(WAITING_PICKUP)
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  productId String? @db.ObjectId
  vendorId  String? @db.ObjectId
  riderId   String? @db.ObjectId

  product Product? @relation(fields: [productId], references: [id])
  vendor  Vendor?  @relation(fields: [vendorId], references: [id])
  rider   Rider?   @relation(fields: [riderId], references: [id])
}

model OrderHistory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @db.ObjectId
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  actorId   String?     @db.ObjectId
  actorType String?     // "VENDOR" | "RIDER" | "SYSTEM" | "ADMIN"
  note      String?
  createdAt DateTime    @default(now())
}

// ===============================
// WALLET MODEL
// ===============================
model Wallet {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  balance         Float    @default(0)
  totalEarned     Float    @default(0)
  totalWithdrawn  Float    @default(0)
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  vendorId String? @unique @db.ObjectId
  vendor   Vendor? @relation(fields: [vendorId], references: [id])

  riderId  String? @unique @db.ObjectId
  rider    Rider?  @relation(fields: [riderId], references: [id])
}
